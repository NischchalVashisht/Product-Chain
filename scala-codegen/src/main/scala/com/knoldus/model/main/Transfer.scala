/*
 * THIS FILE WAS AUTOGENERATED BY THE DIGITAL ASSET DAML SCALA CODE GENERATOR
 * DO NOT EDIT BY HAND!
 */
import _root_.com.digitalasset.ledger.client.{binding=>$u0020lfdomainapi}
import _root_.com.digitalasset.ledger.api.v1.{value=>$u0020rpcvalue}
package com.knoldus.model {
  package Main {
    final case class Transfer(newOwner: ` lfdomainapi`.Primitive.Party, newWholeSaler: ` lfdomainapi`.Primitive.Party, newConsumer: ` lfdomainapi`.Primitive.Party) extends ` lfdomainapi`.ValueRef

    object Transfer extends ` lfdomainapi`.ValueRefCompanion with _root_.scala.Function3[` lfdomainapi`.Primitive.Party, ` lfdomainapi`.Primitive.Party, ` lfdomainapi`.Primitive.Party, _root_.com.knoldus.model.Main.Transfer] {
      import _root_.scala.language.higherKinds;
      trait view[` C`[_]] extends ` lfdomainapi`.encoding.RecordView[` C`, view] { $u0020view =>
        val newOwner: ` C`[` lfdomainapi`.Primitive.Party];
        val newWholeSaler: ` C`[` lfdomainapi`.Primitive.Party];
        val newConsumer: ` C`[` lfdomainapi`.Primitive.Party];
        final override def hoist[` D`[_]](` f` : _root_.scalaz.~>[` C`, ` D`]): view[` D`] = {
          final class $anon extends _root_.scala.AnyRef with view[` D`] {
            override val newOwner = ` f`(` view`.newOwner);
            override val newWholeSaler = ` f`(` view`.newWholeSaler);
            override val newConsumer = ` f`(` view`.newConsumer)
          };
          new $anon()
        }
      };
      implicit val `Transfer Value`: ` lfdomainapi`.Value[_root_.com.knoldus.model.Main.Transfer] = {
        final class $anon extends this.`Value ValueRef`[_root_.com.knoldus.model.Main.Transfer] {
          override def write(value: _root_.com.knoldus.model.Main.Transfer): ` rpcvalue`.Value.Sum = ` record`(scala.Tuple2("newOwner", ` lfdomainapi`.Value.encode(value.newOwner)), scala.Tuple2("newWholeSaler", ` lfdomainapi`.Value.encode(value.newWholeSaler)), scala.Tuple2("newConsumer", ` lfdomainapi`.Value.encode(value.newConsumer)));
          override def read(argValue: ` rpcvalue`.Value.Sum): _root_.scala.Option[_root_.com.knoldus.model.Main.Transfer] = argValue.record.flatMap(((` r` ) => if (` r`.fields.length.==(3))
            ` r`.fields(0) match {
              case ` rpcvalue`.RecordField((""| "newOwner"), _root_.scala.Some(zv0)) => (` lfdomainapi`.Value.decode[` lfdomainapi`.Primitive.Party](zv0) match {
                case _root_.scala.Some(newOwner) => (` r`.fields(1) match {
                  case ` rpcvalue`.RecordField((""| "newWholeSaler"), _root_.scala.Some(zv1)) => (` lfdomainapi`.Value.decode[` lfdomainapi`.Primitive.Party](zv1) match {
                    case _root_.scala.Some(newWholeSaler) => (` r`.fields(2) match {
                      case ` rpcvalue`.RecordField((""| "newConsumer"), _root_.scala.Some(zv2)) => (` lfdomainapi`.Value.decode[` lfdomainapi`.Primitive.Party](zv2) match {
                        case _root_.scala.Some(newConsumer) => Some(Transfer(newOwner, newWholeSaler, newConsumer))
                        case _root_.scala.None => _root_.scala.None
                      })
                      case _ => _root_.scala.None
                    })
                    case _root_.scala.None => _root_.scala.None
                  })
                  case _ => _root_.scala.None
                })
                case _root_.scala.None => _root_.scala.None
              })
              case _ => _root_.scala.None
            }
          else
            _root_.scala.None))
        };
        new $anon()
      };
      override protected val ` dataTypeId` = ` mkDataTypeId`(`Package IDs`.Main, "Main", "Transfer");
      implicit def `Transfer LfEncodable`: ` lfdomainapi`.encoding.LfEncodable[_root_.com.knoldus.model.Main.Transfer] = {
        final class $anon extends ` lfdomainapi`.encoding.LfEncodable[_root_.com.knoldus.model.Main.Transfer] {
          override def encoding(lte: ` lfdomainapi`.encoding.LfTypeEncoding): lte.Out[_root_.com.knoldus.model.Main.Transfer] = {
            object `view ` extends view[lte.Field] {
              val newOwner = lte.field("newOwner", ` lfdomainapi`.encoding.LfEncodable.encoding[` lfdomainapi`.Primitive.Party](lte));
              val newWholeSaler = lte.field("newWholeSaler", ` lfdomainapi`.encoding.LfEncodable.encoding[` lfdomainapi`.Primitive.Party](lte));
              val newConsumer = lte.field("newConsumer", ` lfdomainapi`.encoding.LfEncodable.encoding[` lfdomainapi`.Primitive.Party](lte))
            };
            {
              val `recordFields `: lte.RecordFields[_root_.com.knoldus.model.Main.Transfer] = lte.RecordFields.xmapN(lte.fields(`view `.newOwner), lte.fields(`view `.newWholeSaler), lte.fields(`view `.newConsumer))({
                case scala.Tuple3(newOwner, newWholeSaler, newConsumer) => _root_.com.knoldus.model.Main.Transfer(newOwner, newWholeSaler, newConsumer)
              })({
                case _root_.com.knoldus.model.Main.Transfer(newOwner, newWholeSaler, newConsumer) => scala.Tuple3(newOwner, newWholeSaler, newConsumer)
              });
              lte.record(` dataTypeId`, `recordFields `)
            }
          }
        };
        new $anon()
      }
    }
  }
}
