/*
 * THIS FILE WAS AUTOGENERATED BY THE DIGITAL ASSET DAML SCALA CODE GENERATOR
 * DO NOT EDIT BY HAND!
 */
import _root_.com.digitalasset.ledger.client.{binding=>$u0020lfdomainapi}
import _root_.com.digitalasset.ledger.api.v1.{value=>$u0020rpcvalue}
package com.knoldus.model {
  package Main {
    final case class Product(manufacturer: ` lfdomainapi`.Primitive.Party, wholesaler: ` lfdomainapi`.Primitive.Party, consumer: ` lfdomainapi`.Primitive.Party, name: ` lfdomainapi`.Primitive.Text, ownership: ` lfdomainapi`.Primitive.Party) extends ` lfdomainapi`.Template[Product] {
      override protected[this] def templateCompanion(implicit ` d` : _root_.scala.Predef.DummyImplicit) = Product
    }

    object Product extends ` lfdomainapi`.TemplateCompanion[Product] with _root_.scala.Function5[` lfdomainapi`.Primitive.Party, ` lfdomainapi`.Primitive.Party, ` lfdomainapi`.Primitive.Party, ` lfdomainapi`.Primitive.Text, ` lfdomainapi`.Primitive.Party, _root_.com.knoldus.model.Main.Product] {
      import _root_.scala.language.higherKinds;
      trait view[` C`[_]] extends ` lfdomainapi`.encoding.RecordView[` C`, view] { $u0020view =>
        val manufacturer: ` C`[` lfdomainapi`.Primitive.Party];
        val wholesaler: ` C`[` lfdomainapi`.Primitive.Party];
        val consumer: ` C`[` lfdomainapi`.Primitive.Party];
        val name: ` C`[` lfdomainapi`.Primitive.Text];
        val ownership: ` C`[` lfdomainapi`.Primitive.Party];
        final override def hoist[` D`[_]](` f` : _root_.scalaz.~>[` C`, ` D`]): view[` D`] = {
          final class $anon extends _root_.scala.AnyRef with view[` D`] {
            override val manufacturer = ` f`(` view`.manufacturer);
            override val wholesaler = ` f`(` view`.wholesaler);
            override val consumer = ` f`(` view`.consumer);
            override val name = ` f`(` view`.name);
            override val ownership = ` f`(` view`.ownership)
          };
          new $anon()
        }
      };
      override val id = ` templateId`(packageId = `Package IDs`.Main, moduleName = "Main", entityName = "Product");
      final implicit class `Product syntax`[+` ExOn`](private val id: ` ExOn`) extends _root_.scala.AnyVal {
        def exerciseTransfer(actor: ` lfdomainapi`.Primitive.Party, choiceArgument: com.knoldus.model.Main.Transfer)(implicit ` exOn` : ` lfdomainapi`.encoding.ExerciseOn[` ExOn`, Product]): ` lfdomainapi`.Primitive.Update[` lfdomainapi`.Primitive.ContractId[com.knoldus.model.Main.TransferOwnership]] = ` exercise`(id, "Transfer", _root_.scala.Some(` lfdomainapi`.Value.encode(choiceArgument)));
        def exerciseTransfer(actor: ` lfdomainapi`.Primitive.Party, newOwner: ` lfdomainapi`.Primitive.Party, newWholeSaler: ` lfdomainapi`.Primitive.Party, newConsumer: ` lfdomainapi`.Primitive.Party)(implicit ` exOn` : ` lfdomainapi`.encoding.ExerciseOn[` ExOn`, Product]): ` lfdomainapi`.Primitive.Update[` lfdomainapi`.Primitive.ContractId[com.knoldus.model.Main.TransferOwnership]] = exerciseTransfer(actor, _root_.com.knoldus.model.Main.Transfer(newOwner, newWholeSaler, newConsumer));
        def exerciseArchive(actor: ` lfdomainapi`.Primitive.Party, choiceArgument: com.knoldus.model.DA.Internal.Template.Archive)(implicit ` exOn` : ` lfdomainapi`.encoding.ExerciseOn[` ExOn`, Product]): ` lfdomainapi`.Primitive.Update[` lfdomainapi`.Primitive.Unit] = ` exercise`(id, "Archive", _root_.scala.Some(` lfdomainapi`.Value.encode(choiceArgument)));
        def exerciseArchive(actor: ` lfdomainapi`.Primitive.Party)(implicit ` exOn` : ` lfdomainapi`.encoding.ExerciseOn[` ExOn`, Product]): ` lfdomainapi`.Primitive.Update[` lfdomainapi`.Primitive.Unit] = exerciseArchive(actor, _root_.com.knoldus.model.DA.Internal.Template.Archive())
      };
      override val consumingChoices: Set[` lfdomainapi`.Primitive.ChoiceId] = ` lfdomainapi`.Primitive.ChoiceId.subst(Set("Transfer", "Archive"));
      override def toNamedArguments(` self` : Product) = ` arguments`(scala.Tuple2("manufacturer", ` lfdomainapi`.Value.encode(` self`.manufacturer)), scala.Tuple2("wholesaler", ` lfdomainapi`.Value.encode(` self`.wholesaler)), scala.Tuple2("consumer", ` lfdomainapi`.Value.encode(` self`.consumer)), scala.Tuple2("name", ` lfdomainapi`.Value.encode(` self`.name)), scala.Tuple2("ownership", ` lfdomainapi`.Value.encode(` self`.ownership)));
      override def fromNamedArguments(` r` : ` rpcvalue`.Record) = if (` r`.fields.length.==(5))
        ` r`.fields(0) match {
          case ` rpcvalue`.RecordField((""| "manufacturer"), _root_.scala.Some(zv0)) => (` lfdomainapi`.Value.decode[` lfdomainapi`.Primitive.Party](zv0) match {
            case _root_.scala.Some(z0) => (` r`.fields(1) match {
              case ` rpcvalue`.RecordField((""| "wholesaler"), _root_.scala.Some(zv1)) => (` lfdomainapi`.Value.decode[` lfdomainapi`.Primitive.Party](zv1) match {
                case _root_.scala.Some(z1) => (` r`.fields(2) match {
                  case ` rpcvalue`.RecordField((""| "consumer"), _root_.scala.Some(zv2)) => (` lfdomainapi`.Value.decode[` lfdomainapi`.Primitive.Party](zv2) match {
                    case _root_.scala.Some(z2) => (` r`.fields(3) match {
                      case ` rpcvalue`.RecordField((""| "name"), _root_.scala.Some(zv3)) => (` lfdomainapi`.Value.decode[` lfdomainapi`.Primitive.Text](zv3) match {
                        case _root_.scala.Some(z3) => (` r`.fields(4) match {
                          case ` rpcvalue`.RecordField((""| "ownership"), _root_.scala.Some(zv4)) => (` lfdomainapi`.Value.decode[` lfdomainapi`.Primitive.Party](zv4) match {
                            case _root_.scala.Some(z4) => Some(Product(z0, z1, z2, z3, z4))
                            case _root_.scala.None => _root_.scala.None
                          })
                          case _ => _root_.scala.None
                        })
                        case _root_.scala.None => _root_.scala.None
                      })
                      case _ => _root_.scala.None
                    })
                    case _root_.scala.None => _root_.scala.None
                  })
                  case _ => _root_.scala.None
                })
                case _root_.scala.None => _root_.scala.None
              })
              case _ => _root_.scala.None
            })
            case _root_.scala.None => _root_.scala.None
          })
          case _ => _root_.scala.None
        }
      else
        _root_.scala.None;
      override def fieldEncoding(lte: ` lfdomainapi`.encoding.LfTypeEncoding): view[lte.Field] = {
        object `view ` extends view[lte.Field] {
          val manufacturer = lte.field("manufacturer", ` lfdomainapi`.encoding.LfEncodable.encoding[` lfdomainapi`.Primitive.Party](lte));
          val wholesaler = lte.field("wholesaler", ` lfdomainapi`.encoding.LfEncodable.encoding[` lfdomainapi`.Primitive.Party](lte));
          val consumer = lte.field("consumer", ` lfdomainapi`.encoding.LfEncodable.encoding[` lfdomainapi`.Primitive.Party](lte));
          val name = lte.field("name", ` lfdomainapi`.encoding.LfEncodable.encoding[` lfdomainapi`.Primitive.Text](lte));
          val ownership = lte.field("ownership", ` lfdomainapi`.encoding.LfEncodable.encoding[` lfdomainapi`.Primitive.Party](lte))
        };
        `view `
      };
      override def encoding(lte: ` lfdomainapi`.encoding.LfTypeEncoding)(`view `: view[lte.Field]): lte.Out[_root_.com.knoldus.model.Main.Product] = {
        val `recordFields `: lte.RecordFields[_root_.com.knoldus.model.Main.Product] = lte.RecordFields.xmapN(lte.fields(`view `.manufacturer), lte.fields(`view `.wholesaler), lte.fields(`view `.consumer), lte.fields(`view `.name), lte.fields(`view `.ownership))({
          case scala.Tuple5(manufacturer, wholesaler, consumer, name, ownership) => _root_.com.knoldus.model.Main.Product(manufacturer, wholesaler, consumer, name, ownership)
        })({
          case _root_.com.knoldus.model.Main.Product(manufacturer, wholesaler, consumer, name, ownership) => scala.Tuple5(manufacturer, wholesaler, consumer, name, ownership)
        });
        lte.record(` dataTypeId`, `recordFields `)
      }
    }
  }
}
